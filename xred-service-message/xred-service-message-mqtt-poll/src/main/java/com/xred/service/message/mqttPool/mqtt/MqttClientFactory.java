package com.xred.service.message.mqttPool.mqtt;

import io.vertx.core.Vertx;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.pool2.BasePooledObjectFactory;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.impl.DefaultPooledObject;

/**
 * MQTT Client Factory
 *
 * @author songyh
 * @date 2022/5/20 2:24 PM.
 */
@Slf4j
public class MqttClientFactory extends BasePooledObjectFactory<MqttClient> {

    private MqttClientProperties config;

    public MqttClientFactory(MqttClientProperties config) {
        this.config = config;
    }

    /**
     * 创建client对象
     */
    @Override
    public MqttClient create() throws InterruptedException {
        MqttClientOptions options = new MqttClientOptions();
        options.setMaxMessageSize(config.getMaxMessageSize());
        options.setPassword(config.getPassword());
        options.setUsername(config.getUsername());
        options.setAckTimeout(config.getAckTimeout());
        options.setAutoGeneratedClientId(config.isAutoGeneratedClientId());
        options.setClientId(config.getClientId());
        options.setAutoKeepAlive(config.isAutoKeepAlive());
        options.setCleanSession(config.isCleanSession());
        options.setKeepAliveInterval(config.getKeepAliveInterval());
        options.setWillFlag(config.isWillFlag());
        options.setWillQoS(config.getWillQoS());
        MqttClient client = MqttClient.create(Vertx.vertx(), options);
        MqttClient connect = client.connect(config.getPort(), config.getHost(), r -> {
            if (r.succeeded()) {
                log.info("{}:连接成功回调", log.getName());
            }
            if (r.failed()) {
                log.error("{}:连接失败回调", log.getName());
            }
        });
        return connect;
    }

    /**
     * 用PooledObject封装对象放入池中
     */
    @Override
    public PooledObject<MqttClient> wrap(MqttClient client) {
        return new DefaultPooledObject<>(client);
    }

    /**
     * 销毁client对象
     */
    @Override
    public void destroyObject(PooledObject<MqttClient> pooled) {
        if (pooled == null) {
            return;
        }
        MqttClient client = pooled.getObject();
        if (client.isConnected()) {
            client.disconnect();
        }
    }

    /**
     * 验证client对象,创建连接客户端是异步的,需要在获取的使用对客户端进行判断
     */
    @Override
    public boolean validateObject(PooledObject<MqttClient> pooled) {
        MqttClient client = pooled.getObject();
        boolean flag = false;
        while (!flag) {
            flag = client.isConnected();
        }
        return flag;
    }
}
